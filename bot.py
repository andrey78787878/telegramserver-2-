import os
import json
import datetime
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =========================
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")

# =========================
# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
# =========================
try:
    with open("questions.json", "r", encoding="utf-8") as f:
        questions = json.load(f)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
except FileNotFoundError:
    print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª questions.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    questions = [
        {
            "id": 1,
            "category": "HTML",
            "task": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ doctype",
            "code": "<!DOCTYPE html>"
        },
        {
            "id": 2,
            "category": "HTML", 
            "task": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤",
            "code": "<div><p>–¢–µ–∫—Å—Ç</div>"
        }
    ]
except json.JSONDecodeError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ questions.json: {e}")
    questions = []

# =========================
# /start
# =========================
def start(update: Update, context: CallbackContext):
    if not questions:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return
        
    categories = sorted({q["category"] for q in questions})
    keyboard = [[InlineKeyboardButton(cat, callback_data=f"cat_{cat}")] for cat in categories]
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(keyboard))

# =========================
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# =========================
def on_category(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    category = query.data.split("_")[1]
    items = [q for q in questions if q["category"] == category]
    
    if not items:
        query.edit_message_text("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return
        
    context.user_data["current"] = {"items": items, "index": 0}
    show_question(query, items[0])

# =========================
# –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
# =========================
def show_question(query, q):
    text = f"üìã –í–æ–ø—Ä–æ—Å: {q['task']}"
    if q.get("code"):
        text += f"\n\nüíª –ö–æ–¥:\n<code>{q['code']}</code>"
    
    keyboard = [[
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"ans_yes_{q['id']}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"ans_no_{q['id']}"),
        InlineKeyboardButton("üü° –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data=f"ans_part_{q['id']}")
    ]]
    query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")

# =========================
# –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å (–∫–Ω–æ–ø–∫–∏)
# =========================
def on_answer(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    parts = query.data.split("_")
    if len(parts) < 3:
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    ans = parts[1]
    qid = parts[2]
    
    try:
        qid = int(qid)
        q = next(x for x in questions if x["id"] == qid)
    except (ValueError, StopIteration):
        query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    user_id = update.effective_user.id

    if ans in ("no", "part"):
        context.user_data["pending"] = {
            "question": q,
            "answer": "–ù–µ—Ç" if ans == "no" else "–ß–∞—Å—Ç–∏—á–Ω–æ",
            "user_id": user_id
        }
        query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ ¬´{'–ù–µ—Ç' if ans == 'no' else '–ß–∞—Å—Ç–∏—á–Ω–æ'}¬ª. \n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"
        )
        return

    send_to_webhook(user_id, q, "–î–∞", "")
    go_next_question(query, context)

# =========================
# –ü—Ä–∏—ë–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
# =========================
def on_comment(update: Update, context: CallbackContext):
    if "pending" not in context.user_data:
        update.message.reply_text("‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    pending = context.user_data.pop("pending")
    q = pending["question"]
    user_id = pending["user_id"]
    comment_text = update.message.text.strip()
    
    if not comment_text:
        update.message.reply_text("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        context.user_data["pending"] = pending
        return
        
    send_to_webhook(user_id, q, pending["answer"], comment_text)
    update.message.reply_text("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    go_next_question(update.message, context)

# =========================
# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
# =========================
def go_next_question(message_or_query, context):
    if "current" not in context.user_data:
        if hasattr(message_or_query, "reply_text"):
            message_or_query.reply_text("‚ùå –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    current = context.user_data["current"]
    items = current.get("items", [])
    idx = current.get("index", 0) + 1
    context.user_data["current"]["index"] = idx

    if idx < len(items):
        next_q = items[idx]
        if hasattr(message_or_query, "edit_message_text"):
            show_question(message_or_query, next_q)
        else:
            text = f"üìã –í–æ–ø—Ä–æ—Å: {next_q['task']}"
            if next_q.get("code"):
                text += f"\n\nüíª –ö–æ–¥:\n<code>{next_q['code']}</code>"
                
            keyboard = [[
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"ans_yes_{next_q['id']}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"ans_no_{next_q['id']}"),
                InlineKeyboardButton("üü° –ß–∞—Å—Ç–∏—á–Ω–æ", callback_data=f"ans_part_{next_q['id']}")
            ]]
            message_or_query.reply_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")
    else:
        if hasattr(message_or_query, "reply_text"):
            message_or_query.reply_text("üéâ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ!")
        else:
            message_or_query.edit_message_text("üéâ –ß–µ–∫-–ª–∏—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ!")
        context.user_data.pop("current", None)

# =========================
# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Apps Script
# =========================
def send_to_webhook(user_id, q, answer, comment):
    if not WEBHOOK_URL:
        print("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
        return
        
    payload = {
        "timestamp": datetime.datetime.utcnow().isoformat(),
        "user_id": str(user_id),
        "category": q["category"],
        "task": q["task"],
        "answer": answer,
        "code": q.get("code", ""),
        "comment": comment
    }
    try:
        response = requests.post(WEBHOOK_URL, json=payload, timeout=10)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# =========================
# –ö–æ–º–∞–Ω–¥–∞ /cancel
# =========================
def cancel(update: Update, context: CallbackContext):
    if "pending" in context.user_data:
        context.user_data.pop("pending")
    if "current" in context.user_data:
        context.user_data.pop("current")
    update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")

# =========================
# –ö–æ–º–∞–Ω–¥–∞ /status
# =========================
def status(update: Update, context: CallbackContext):
    update.message.reply_text(f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# =========================
def error_handler(update: Update, context: CallbackContext):
    print(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")
    try:
        if update and update.effective_message:
            update.effective_message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    except:
        pass

# =========================
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
# =========================
def main():
    if not TELEGRAM_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üìä –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
    print(f"üåê WEBHOOK_URL: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEBHOOK_URL else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    try:
        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dispatcher = updater.dispatcher
        
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("cancel", cancel))
        dispatcher.add_handler(CommandHandler("status", status))
        dispatcher.add_handler(CallbackQueryHandler(on_category, pattern="^cat_"))
        dispatcher.add_handler(CallbackQueryHandler(on_answer, pattern="^ans_"))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, on_comment))
        dispatcher.add_error_handler(error_handler)

        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    main()
